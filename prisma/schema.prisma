// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  stripeCustomerId String?
  role             ROLE      @default(USER)
  accounts         Account[]
  sessions         Session[]
  Order            Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String         @unique
  price       Float          @db.Float()
  description String         @db.Text
  quantity    Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  images      ProductImage[]
  collections Collection[]

  @@index([categoryId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Category {
  id              Int       @id @default(autoincrement())
  name            String
  slug            String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[]
  backgroundImage String?
}

model Collection {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float    @db.Float()
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int

  @@index([orderId])
}

model Order {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  orderItems    OrderItem[]
  orderStatus   ORDER_STATUS   @default(PENDING)
  paymentStatus PAYMENT_STATUS @default(PENDING)

  @@index([userId])
}

enum ROLE {
  ADMIN
  USER
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PAYMENT_STATUS {
  PENDING
  COMPLETED
  CANCELLED
}
